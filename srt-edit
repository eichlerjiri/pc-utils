#!/usr/bin/env python
import os
import re
import sys

def printError(str):
	print('\033[91m' + str + '\033[0m', file=sys.stderr)

def toFullMillis(hours, minutes, secs, millis):
	return int(millis) + 1000 * (int(secs) + 60 * (int(minutes) + (60 * int(hours))))

def toSrt(fullMillis):
	millis = fullMillis
	secs = millis // 1000
	minutes = secs // 60
	hours = minutes // 60
	millis %= 1000
	secs %= 60
	minutes %= 60
	return b'%02i:%02i:%02i,%03i' % (hours, minutes, secs, millis)

def processFile(file, infile, process, diff, diffFps):
	output = b''
	extraText = '[FIXING] ' if process else ''

	state = 0
	linenum = 0
	subnum = 0
	subnumWrite = 0
	lastMillis = 0
	for line in infile:
		linenum += 1

		mc = re.match(b'^(.*?)([\r\n]*)$', line)
		content = mc.group(1)

		if mc.group(2) != b'\r\n':
			print(extraText + file + ': line ' + str(linenum) + ': Invalid newline')

		if state == 0:
			if content == b'':
				print(extraText + file + ': line ' + str(linenum) + ': Extra blank line')
				continue

			m = re.match(b'^[0-9]+$', content)
			if not m:
				printError(file + ': line ' + str(linenum) + ': Invalid format')
				return False

			if int(content) != subnum + 1:
				print(extraText + file + ': line ' + str(linenum) + ': Invalid subtitle number')
			subnum = int(content)

			if process:
				subnumWrite += 1
				output += str(subnumWrite).encode() + b'\r\n'

			state = 1
		elif state == 1:
			timeregex = b'([0-9]{2}):([0-9]{2}):([0-9]{2}),([0-9]{3,4})'
			m = re.match(b'^' + timeregex + b' --> ' + timeregex + b'$', content)
			if not m:
				printError(file + ': line ' + str(linenum) + ': Invalid format')
				return False

			if len(m.group(4)) == 4 or len(m.group(8)) == 4:
				print(extraText + file + ': line ' + str(linenum) + ': Wrong millis format')

			millis1 = toFullMillis(m.group(1), m.group(2), m.group(3), m.group(4))
			millis2 = toFullMillis(m.group(5), m.group(6), m.group(7), m.group(8))

			if process:
				if (millisFrom == -1 or millisFrom <= millis1
				) and (millisTo == -1 or millisTo > millis1):
					f = millisFrom if millisFrom != -1 else millisFrom
					millis1 += diff + int(round(diffFps * (millis1 - f)))
					millis2 += diff + int(round(diffFps * (millis2 - f)))
					if millis1 < 0 or millis2 < 0:
						printError(file + ': line ' + str(linenum) + ': Negative time')
						return False
				output += toSrt(millis1) + b' --> ' + toSrt(millis2) + b'\r\n'

			if millis1 >= millis2:
				print(file + ': line ' + str(linenum) + ': Invalid time interval')
			if millis1 < lastMillis:
				print(file + ': line ' + str(linenum) + ': Overlap')
			lastMillis = millis2

			state = 2
		elif state == 2:
			if process:
				output += content + b'\r\n'
			if content == b'':
				state = 0

	if state != 0:
		print(extraText + file + ': line ' + str(linenum) + ': Invalid end of file')
	if process and state == 2:
		output += b'\r\n'

	return output

if len(sys.argv) < 2:
	print('Usage: ' + os.path.basename(sys.argv[0]) + ' [from, to] <command> <SRT files to edit>\n'
		'\n'
		'command:\n'
		'    verify          check SRT file for common format problems\n'
		'    fix             rewrite SRT file to fix some format problems\n'
		'    +<millis>       forward subtitles for amount of milliseconds\n'
		'    -<millis>       backward subtitles for amount of milliseconds\n'
		'    <fps1>%<fps2>   change speed of subtitles by fps1/fps2\n'
		'\n'
		'from, to:\n'
		'    from:<secs>     time index from which do retime (optional)\n'
		'    to:<secs>       time index to which do retime (optional)', file=sys.stderr)
	sys.exit(1)

i = 1

millisFrom = -1
millisTo = -1

process = 0
diff = 0
diffFps = 0

try:
	done = 0
	while not done:
		if sys.argv[i].startswith('from:'):
			millisFrom = int(sys.argv[i][len('from:'):]) * 1000
		elif sys.argv[i].startswith('to:'):
			millisTo = int(sys.argv[i][len('to:'):]) * 1000
		elif sys.argv[i] == 'verify':
			done = 1
		elif sys.argv[i] == 'fix':
			process = 1
			done = 1
		elif '%' in sys.argv[i]:
			idx = sys.argv[i].index('%')
			fpsFrom = float(sys.argv[i][:idx])
			fpsTo = float(sys.argv[i][idx+len('%'):])
			if fpsFrom == 0 or fpsTo == 0:
				printError('Invalid argument: ' + sys.argv[i])
				sys.exit(1)
			process = 1
			diffFps = fpsFrom / fpsTo - 1;
			done = 1
		else:
			process = 1
			diff = int(sys.argv[i])
			done = 1

		i += 1
		if i >= len(sys.argv):
			printError('Missing arguments')
			sys.exit(1)
except ValueError:
	printError('Invalid argument: ' + sys.argv[i])
	sys.exit(1)

ret = 0
for file in sys.argv[i:]:
	try:
		with open(file, 'rb') as infile:
			output = processFile(file, infile, process, diff, diffFps)
		if output == False:
			ret = 1
		elif process:
			with open(file, 'wb') as outfile:
				outfile.write(output)
	except OSError as e:
		printError(file + ': ' + e.strerror)
		ret = 1
sys.exit(ret)
